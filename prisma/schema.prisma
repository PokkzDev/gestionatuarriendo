generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(uuid()) @db.VarChar(36)
  userId             String  @db.VarChar(36)
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.VarChar(36)
  sessionToken String   @unique
  userId       String   @db.VarChar(36)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id String @id @default(uuid()) @db.VarChar(36)
  email String @unique
  name String?
  password String?
  emailVerified DateTime?
  image String?
  role Role @default(ARRENDATARIO)
  nameChangesCount Int @default(0)
  accountTier AccountTier @default(FREE)
  
  accounts Account[]
  sessions Session[]
  expenses Expense[]
  properties Property[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ARRENDATARIO
  PROPIETARIO
  AMBOS
}

enum AccountTier {
  FREE
  PREMIUM
  ELITE
}

model Expense {
  id String @id @default(uuid()) @db.VarChar(36)
  amount Float
  description String
  date DateTime @default(now())
  type ExpenseType
  userId String @db.VarChar(36)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ExpenseType {
  GAS
  ELECTRICITY
  WATER
  INTERNET
  RENT
  MAINTENANCE
  OTHER
}

model Property {
  id String @id @default(uuid()) @db.VarChar(36)
  name String
  address String
  description String?
  propertyType PropertyType @default(APARTMENT)
  bedrooms Int @default(1)
  bathrooms Int @default(1)
  hasParking Boolean @default(false)
  parkingSpots Int @default(0)
  parkingDetails Json?
  hasStorage Boolean @default(false)
  storageUnits Int @default(0)
  storageDetails Json?
  furnished Boolean @default(false)
  totalArea Float?
  rentAmount Float?
  status PropertyStatus @default(AVAILABLE)
  userId String @db.VarChar(36)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tenants PropertyTenant[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PropertyType {
  APARTMENT
  HOUSE
  CONDO
  OFFICE
  COMMERCIAL
  LAND
  OTHER
}

enum PropertyStatus {
  AVAILABLE
  OCCUPIED
  UNDER_MAINTENANCE
}

model PropertyTenant {
  id String @id @default(uuid()) @db.VarChar(36)
  propertyId String @db.VarChar(36)
  tenantEmail String
  tenantId String? @db.VarChar(36)
  status InvitationStatus @default(PENDING)
  
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([propertyId, tenantEmail])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}


