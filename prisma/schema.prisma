generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid()) @db.VarChar(36)
  userId            String  @db.VarChar(36)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(uuid()) @db.VarChar(36)
  sessionToken String   @unique
  userId       String   @db.VarChar(36)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                    String                @id @default(uuid()) @db.VarChar(36)
  email                 String                @unique
  name                  String?
  password              String?
  emailVerified         DateTime?
  image                 String?
  role                  Role                  @default(ARRENDATARIO)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  nameChangesCount      Int                   @default(0)
  accountTier           AccountTier           @default(FREE)
  subscriptionId        String?
  subscriptionStatus    String?
  subscriptionExpiresAt DateTime?
  subscriptionType      String?
  metadata              Json?
  accounts              Account[]
  expenses              Expense[]
  properties            Property[]
  sessions              Session[]
  subscriptionPayments  SubscriptionPayment[]
}

model Expense {
  id          String      @id @default(uuid()) @db.VarChar(36)
  amount      Float
  description String
  date        DateTime    @default(now())
  type        ExpenseType
  userId      String      @db.VarChar(36)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Expense_userId_fkey")
}

model Property {
  id             String           @id @default(uuid()) @db.VarChar(36)
  name           String
  address        String
  description    String?
  bedrooms       Int              @default(1)
  bathrooms      Int              @default(1)
  hasParking     Boolean          @default(false)
  totalArea      Float?
  rentAmount     Float?
  status         PropertyStatus   @default(AVAILABLE)
  userId         String           @db.VarChar(36)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  propertyType   PropertyType     @default(APARTMENT)
  furnished      Boolean          @default(false)
  hasStorage     Boolean          @default(false)
  parkingSpots   Int              @default(0)
  parkingDetails Json?
  storageDetails Json?
  storageUnits   Int              @default(0)
  paymentDueDay  Int?             @default(1)
  petsAllowed    Boolean          @default(false)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenants        PropertyTenant[]

  @@index([userId], map: "Property_userId_fkey")
}

model PropertyTenant {
  id          String           @id @default(uuid()) @db.VarChar(36)
  propertyId  String           @db.VarChar(36)
  tenantEmail String
  tenantId    String?          @db.VarChar(36)
  status      InvitationStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  property    Property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  solicitudes Solicitud[]      @relation("TenantSolicitudes")

  @@unique([propertyId, tenantEmail])
}

model SubscriptionPayment {
  id                      String                    @id @default(uuid()) @db.VarChar(36)
  userId                  String                    @db.VarChar(36)
  amount                  Decimal                   @db.Decimal(10, 2)
  currency                String                    @default("CLP")
  status                  SubscriptionPaymentStatus
  paymentMethod           String
  paymentType             PaymentType
  planId                  String
  transactionId           String?
  merchantTransactionId   String?                   @unique
  description             String?
  metadata                Json?
  billingName             String?
  billingEmail            String?
  billingAddress          String?
  billingDocument         String?
  subscriptionPeriodStart DateTime?
  subscriptionPeriodEnd   DateTime?
  taxAmount               Decimal?                  @db.Decimal(10, 2)
  taxPercentage           Decimal?                  @db.Decimal(5, 2)
  invoiceNumber           String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model Solicitud {
  id              String          @id @default(uuid()) @db.VarChar(36)
  title           String
  description     String          @db.Text
  status          SolicitudStatus @default(PENDIENTE)
  type            SolicitudType
  priority        SolicitudPriority @default(MEDIA)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  propertyTenantId String         @db.VarChar(36)
  propertyTenant  PropertyTenant  @relation("TenantSolicitudes", fields: [propertyTenantId], references: [id], onDelete: Cascade)
  responses       SolicitudResponse[]

  @@index([propertyTenantId])
  @@index([status])
  @@index([createdAt])
}

model SolicitudResponse {
  id          String   @id @default(uuid()) @db.VarChar(36)
  message     String   @db.Text
  createdAt   DateTime @default(now())
  solicitudId String   @db.VarChar(36)
  isFromOwner Boolean  @default(false)
  solicitud   Solicitud @relation(fields: [solicitudId], references: [id], onDelete: Cascade)

  @@index([solicitudId])
}

enum Role {
  ARRENDATARIO
  PROPIETARIO
  AMBOS
}

enum AccountTier {
  FREE
  PREMIUM
  ELITE
}

enum ExpenseType {
  GAS
  ELECTRICITY
  WATER
  INTERNET
  RENT
  MAINTENANCE
  OTHER
}

enum PropertyType {
  APARTMENT
  HOUSE
  CONDO
  OFFICE
  COMMERCIAL
  LAND
  OTHER
}

enum PropertyStatus {
  AVAILABLE
  OCCUPIED
  UNDER_MAINTENANCE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SubscriptionPaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentType {
  SUBSCRIPTION
  ONE_TIME
}

enum SolicitudStatus {
  PENDIENTE
  EN_PROCESO
  COMPLETADA
  RECHAZADA
}

enum SolicitudType {
  REPARACION
  MANTENIMIENTO
  CONSULTA
  QUEJA
  OTRO
}

enum SolicitudPriority {
  BAJA
  MEDIA
  ALTA
  URGENTE
}
